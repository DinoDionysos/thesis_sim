<?xml version="1.0"?>
<!--<robot name="taurob_tracker" xmlns:xacro="http://www.ros.org/wiki/xacro">-->
<robot name="example"
  xmlns:xacro="http://www.ros.org/wiki/xacro">

  <arg name="laser_rot" default="0.0" />
  <xacro:property name="gpu" value="$(arg gpu)" />
  <!-- Constants for robot dimensions -->
  <xacro:property name="M_PI" value="3.1415926535897931" />
  <xacro:property name="tracker_base_size_x" value="1.0" />
  <xacro:property name="tracker_base_size_y" value="0.5" />
  <xacro:property name="tracker_base_size_z" value="0.2 " />

  <xacro:property name="tracker_mass" value="30.0 " />

  <xacro:property name="tracker_base_offset_x" value="-0.122" />
  <xacro:property name="tracker_base_offset_z" value="-0.08" />

  <xacro:property name="flipper_endpoint_x" value="0.45" />
  <xacro:property name="flipper_offset_x" value="0.0" />
  <xacro:property name="flipper_upper_shortening_x" value="0.0" />
  <xacro:property name="flipper_mass" value="2.0" />

  <!-- width overall is 0.58 ->  (0.58 - 0.0925)/2 = 0.24375 -->
  <xacro:property name="track_offset_y" value="0.24375" />
  <!--Below pending clarification-->
  <xacro:property name="track_offset_z" value="-0.09" />

  <xacro:property name="track_wheel_radius" value="0.13" />
  <xacro:property name="track_width" value="0.0925" />

  <xacro:property name="camera_size" value="0.05" /> <!-- Size of square 'camera' box -->
  <xacro:property name="camera_depth_x" value="0.5" />
  <xacro:property name="camera_depth_y" value="0.0" />
  <xacro:property name="camera_depth_z" value="${tracker_base_size_z*0.5}" />
  <!-- Import all Gazebo-customization elements, including Gazebo colors -->
  <xacro:include filename="$(find taurob_tracker_description)/urdf/taurob_tracker.gazebo" />
  <!-- Import Camera macro -->
  <xacro:include filename="$(find taurob_tracker_description)/urdf/taurob_camera.xacro" />
  <!-- Import Gazebo modules for the camera -->
  <xacro:include filename="$(find taurob_tracker_description)/urdf/taurob_camera.gazebo" />
  <!-- Import Laser scanner macro 
  <xacro:include filename="$(find hector_sensors_description)/urdf/hokuyo_utm30lx.urdf.xacro" />
  -->
  <!-- Import realsense d435 macro -->
  <xacro:include filename="$(find hector_sensors_description)/urdf/realsense_d435_camera.urdf.xacro" />
  <!-- Import realsense t265 camera (not available on melodic?)
  <xacro:include filename="$(find hector_sensors_description)/urdf/realsense_t265.urdf.xacro" /> -->
  <!-- Import generic stereo camera -->
  <xacro:include filename="$(find hector_sensors_description)/urdf/generic_stereo_camera.urdf.xacro" /> 
  <!-- Import Rviz colors -->
  <xacro:include filename="$(find taurob_tracker_description)/urdf/materials.xacro" />
  <!-- Import Hector macros for inertia calculation -->
  <xacro:include filename="$(find hector_xacro_tools)/urdf/inertia_tensors.urdf.xacro" />
  <!-- include Velodyne VLP-16 
  <xacro:include filename="$(find taurob_tracker_description)/urdf/VLP-16.urdf.xacro" />
  -->
  <!-- Infrared Camera Plugin 
  <xacro:include filename="$(find taurob_tracker_description)/urdf/flir_a35_camera.urdf.xacro" />
  -->
  <!-- Import Gazebo modules for the depth camera -->
  <xacro:include filename="$(find gpr_loc_bringup)/urdf/taurob_camera_depth.gazebo" />
  <!-- Import Depth Camera macro -->
  <xacro:include filename="$(find gpr_loc_bringup)/urdf/taurob_camera_depth.xacro" />

  <link name="base_link" />

  <joint name="chassis_joint" type="fixed">
    <origin xyz="${-tracker_base_offset_x} 0 0.193" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="chassis_link" />
  </joint>

  <!-- Chassis Link -->
  <link name="chassis_link">
    <xacro:inertial_cuboid_with_pose mass="${tracker_mass}" x_length="${tracker_base_size_x*0.66}" y_length="${tracker_base_size_y}" z_length="${tracker_base_size_z}">
      <origin xyz="${-tracker_base_size_x*0.25} 0.0 ${-tracker_base_size_z*0.5}" rpy="0 0 0" />
    </xacro:inertial_cuboid_with_pose>

    <!-- Body -->
    <visual>
      <origin xyz="0.0 0.0 0.0" rpy="0 0 ${-1 * M_PI/2}" />
      <geometry>
        <mesh filename="package://taurob_tracker_description/meshes/tracker_chassis_no_tracks.dae" scale="0.01 0.01 0.01" />
      </geometry>
      <!--<material name="white" />-->
    </visual>

    <collision>
      <origin xyz="${tracker_base_offset_x-0.13} 0.0 ${tracker_base_offset_z+0.005}" rpy="0 0 0" />
      <geometry>
        <box size="${tracker_base_size_x-0.3} ${tracker_base_size_y - track_width} ${tracker_base_size_z}" />
      </geometry>
    </collision>
    <!-- Fake Wheels -->
    <collision>
      <origin xyz="0 ${track_offset_y} ${track_offset_z}" rpy="${M_PI/2} 0 0" />
      <geometry>
        <cylinder length="${track_width}" radius="${track_wheel_radius}" />
      </geometry>
    </collision>
    <collision>
      <origin xyz="0 -${track_offset_y} ${track_offset_z}" rpy="${M_PI/2} 0 0" />
      <geometry>
        <cylinder length="${track_width}" radius="${track_wheel_radius}" />
      </geometry>
    </collision>
    <collision>
      <origin xyz="${-tracker_base_size_x*0.5} ${track_offset_y} ${track_offset_z}" rpy="${M_PI/2} 0 0" />
      <geometry>
        <cylinder length="${track_width}" radius="${track_wheel_radius}" />
      </geometry>
    </collision>
    <collision>
      <origin xyz="${-tracker_base_size_x*0.5} -${track_offset_y} ${track_offset_z}" rpy="${M_PI/2} 0 0" />
      <geometry>
        <cylinder length="${track_width}" radius="${track_wheel_radius}" />
      </geometry>
    </collision>
  </link>

  <!-- Flipper front link -->
  <link name="flipper_link_front">
    <xacro:inertial_cuboid_with_pose mass="${flipper_mass}" x_length="${tracker_base_size_x*0.5}" y_length="${track_width*2}" z_length="0.17651">
      <origin xyz="${-tracker_base_offset_x} 0.0 0.0" rpy="0 0 0" />
    </xacro:inertial_cuboid_with_pose>
    <origin xyz="0 0 0" rpy="0 0 0" />

    <!-- Left side -->
    <collision name="flipper_left">
      <origin xyz="${flipper_endpoint_x} ${track_offset_y} 0" rpy="-${M_PI * 0.5} 0.0 0.0" />
      <geometry>
        <cylinder length="${track_width}" radius="${track_wheel_radius}" />
      </geometry>
    </collision>
    <visual name="flipper_left">
      <origin xyz="${-tracker_base_offset_x-flipper_offset_x} 0 ${-track_offset_z}" rpy="0 0 -${M_PI * 0.5}" />
      <geometry>
        <mesh filename="package://taurob_tracker_description/meshes/flipper_left_forward.dae" scale="0.01 0.01 0.01" />
      </geometry>
    </visual>

    <!-- Right side -->
    <collision name="flipper_right">
      <origin xyz="${flipper_endpoint_x} -${track_offset_y} 0" rpy="-${M_PI * 0.5} 0.0 0.0" />
      <geometry>
        <cylinder length="${track_width}" radius="${track_wheel_radius}" />
      </geometry>
    </collision>
    <visual name="flipper_right">
      <origin xyz="${-tracker_base_offset_x-flipper_offset_x} 0 ${-track_offset_z}" rpy="0 0 -${M_PI * 0.5}" />
      <geometry>
        <mesh filename="package://taurob_tracker_description/meshes/flipper_right_forward.dae" scale="0.01 0.01 0.01" />
      </geometry>
    </visual>
  </link>

  <!-- Flipper front joint -->
  <joint name="flipper_joint_front" type="revolute">
    <origin xyz="${tracker_base_offset_x-flipper_offset_x} 0 ${track_offset_z}" rpy="0 0 0" />
    <axis xyz="0 -1 0" />

    <limit lower="${-50 * M_PI / 180}" upper="${30 * M_PI / 180}" effort="10000" velocity="${1.0 * 30 * M_PI / 180}" />

    <parent link="chassis_link" />
    <child link="flipper_link_front" />
  </joint>

  <!-- Flipper back -->
  <link name="flipper_link_back">
    <xacro:inertial_cuboid_with_pose mass="${flipper_mass}" x_length="${tracker_base_size_x*0.25}" y_length="${track_width*2}" z_length="0.17651">
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
    </xacro:inertial_cuboid_with_pose>
    <origin xyz="0 0 0" rpy="0 0 0" />

    <!-- Wheel back -->

    <visual>
      <origin xyz="${-tracker_base_offset_x+0.38} 0 ${-track_offset_z}" rpy="0 0 -${M_PI * 0.5}" />
      <geometry>
        <mesh filename="package://taurob_tracker_description/meshes/flipper_left_back.dae" scale="0.01 0.01 0.01" />
      </geometry>
    </visual>

    <visual name="flipper_right">
      <origin xyz="${-tracker_base_offset_x+0.38} 0 ${-track_offset_z}" rpy="0 0 -${M_PI * 0.5}" />
      <geometry>
        <mesh filename="package://taurob_tracker_description/meshes/flipper_right_back.dae" scale="0.01 0.01 0.01" />
      </geometry>
    </visual>
  </link>

  <joint name="flipper_joint_back" type="revolute">
    <origin xyz="${tracker_base_offset_x-(tracker_base_size_x*0.5-track_wheel_radius)} 0 ${track_offset_z}" rpy="0 0 0" />
    <axis xyz="0 -1 0" />
    <mimic joint="flipper_joint_front" multiplier="0.5" />

    <limit lower="${-170 * M_PI / 180}" upper="${180 * M_PI / 180}" effort="10000" velocity="${10.0 * 360 * M_PI / 180}" />
    <parent link="chassis_link" />
    <child link="flipper_link_back" />
  </joint>
  
  <!--Elevated Camera Mount-->
  <!-- Infrared Camera
  <flir_a35_camera name="flir" parent="chassis_link">
    <origin xyz="-0.5 0 0.3" rpy="0 0 0" />
  </flir_a35_camera>
  -->
  <!--Elevated Camera (IDS) -->
  <joint name="camera_mount_joint" type="fixed">
    <parent link="chassis_link" />
    <child link="camera_mount" />
    <origin xyz="-0.39 0 0.639" rpy="0 0 0" />
  </joint>

  <link name="camera_mount">
    <origin xyz="0 0 0" rpy="0 0 0" />
  </link>



  <!-- Accessories -->
  <!-- Cameras -->
  <!-- front 
  <xacro:taurob_camera suffix="front" parent="chassis_link">
    <origin xyz="0.11 0.0 ${-tracker_base_size_z*0.5}" rpy="0 0 0" />
  </xacro:taurob_camera>
  <xacro:taurob_camera_gazebo link_name="camera_link_front" camera_name="camera_front" rtsp_support="false" />
  -->
  <!-- back 
  <xacro:taurob_camera suffix="back" parent="chassis_link">
    <origin xyz="-0.6 0.0 ${-tracker_base_size_z*0.5}" rpy="0 0 ${M_PI}" />
  </xacro:taurob_camera>
  <xacro:taurob_camera_gazebo link_name="camera_link_back" camera_name="camera_back" rtsp_support="false" />
  -->
  <!-- elevated 
  <xacro:taurob_camera suffix="elevated" parent="camera_mount">
    <origin xyz="0 0 0" rpy="0 0 0" />
  </xacro:taurob_camera>
  <xacro:taurob_camera_gazebo link_name="camera_link_elevated" camera_name="camera_elevated" rtsp_support="false" />
  -->
  <!--dummy link to correct the pointcloud rotation
  <link name="camera_link_depth_rotated">
    <origin xyz="0 0 0" rpy="0 0 0" />
  </link>
  <joint name="camera_mount_joint_2" type="fixed">
    <parent link="camera_link_depth" />
    <child link="camera_link_depth_rotated" />
    <origin xyz="0.0 0.0 0.0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
  </joint>
  -->

  <!-- Depth camera  
  <xacro:taurob_camera_depth suffix="depth" parent="chassis_link">
    <origin xyz="${camera_depth_x} ${camera_depth_y+0.5} ${camera_depth_z}" rpy="0 ${M_PI*5/180} 0" />
  </xacro:taurob_camera_depth>
  <xacro:taurob_camera_gazebo_depth link_name="camera_link_depth" camera_name="camera_depth" rtsp_support="false" />
  -->
  
  <!-- stereo camera -->
  <xacro:generic_stereo_camera name="stereo_camera" parent="camera_mount" ros_topic="taurob/stereo_camera" cam_info_topic="taurob/stereo_camera_info" update_rate="30" res_x="720" res_y="1280" image_format="R8G8B8" hfov="70" baseline="0.07">
    <origin xyz="0.0 0.00 0.0" rpy="0 0 0" />
  </xacro:generic_stereo_camera>

  <!-- Realsense d435 --><arg name="realsense_d435_name" default="realsense_d435" />
  <xacro:realsense_d435_camera name="realsense_d435" parent="camera_mount">
    <origin xyz="-0.1575 0.00 0.00" rpy="0 0 0" />
  </xacro:realsense_d435_camera>
  <!-- static transforms for realsense d435 frames 
  <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg realsense_d435_name)_color_frame_pub" args="0 0.015 0 0 0 0 /$(arg realsense_d435_name)_link /$(arg realsense_d435_name)_color_frame" /> 
  <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg realsense_d435_name)_cam_color_optical_frame_pub" args="0 0 0 -1.57 0 -1.57  /$(arg realsense_d435_name)_color_frame /$(arg realsense_d435_name)_color_optical_frame" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg realsense_d435_name)_depth_frame_pub" args="0 0 0 0 0 0 /$(arg realsense_d435_name)_link /$(arg realsense_d435_name)_depth_frame" /> 
  <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg realsense_d435_name)_depth_optical_frame_pub" args="0 0 0 -1.57 0 -1.57  /$(arg realsense_d435_name)_depth_frame /$(arg realsense_d435_name)_depth_optical_frame" /> -->

  <!-- Laser scanner -->
  <!-- Front 
  <xacro:hokuyo_utm30lx_model name="laser_scan_front_model" parent="chassis_link">
    <origin xyz="0.1575 0.00 -0.04" rpy="${M_PI} 0 0" />
  </xacro:hokuyo_utm30lx_model>
  -->
  <!-- Rear 
  <xacro:hokuyo_utm30lx_model name="laser_scan_rear_model" parent="chassis_link">
    <origin xyz="-0.613 -0.082 0.017" rpy="${M_PI} 0 0" />
  </xacro:hokuyo_utm30lx_model>
  <xacro:if value="${gpu}">
    <xacro:hokuyo_utm30lx_gpu name="laser_scan_front" update_rate="15" ros_topic="/taurob_tracker/laser_scan_front" ray_count="360" min_angle="-35" max_angle="35" parent="laser_scan_front_model_frame">
      <origin xyz="0 0 0" rpy="0 0 0" />
    </xacro:hokuyo_utm30lx_gpu>
    <xacro:hokuyo_utm30lx_gpu name="laser_scan_rear" update_rate="15" ros_topic="/taurob_tracker/laser_scan_rear" ray_count="360" min_angle="90" max_angle="270" parent="laser_scan_rear_model_frame">
      <origin xyz="0 0 0" rpy="0 0 0" />
    </xacro:hokuyo_utm30lx_gpu>
  </xacro:if>
  <xacro:unless value="${gpu}">
    <xacro:hokuyo_utm30lx name="laser_scan_front" update_rate="15" ros_topic="/taurob_tracker/laser_scan_front" ray_count="360" min_angle="-35" max_angle="35" parent="laser_scan_front_model_frame">
      <origin xyz="0 0 0" rpy="0 0 0" />
    </xacro:hokuyo_utm30lx>
    <xacro:hokuyo_utm30lx name="laser_scan_rear" update_rate="15" ros_topic="/taurob_tracker/laser_scan_rear" ray_count="360" min_angle="90" max_angle="270" parent="laser_scan_rear_model_frame">
      <origin xyz="0 0 0" rpy="0 0 0" />
    </xacro:hokuyo_utm30lx>
  </xacro:unless>
  -->

  <!-- Velodyne 20 Grad nach vorne geneigt
  <VLP-16 parent="chassis_link" name="velodyne" topic="/velodyne_points" hz="10" samples="440" gpu="${gpu}" max_range="30.0">
    <origin xyz="-0.66375 0 0.898" rpy="0.3490659 0 ${M_PI/2}" />
  </VLP-16>
  -->
  <!-- IMU 
  <link name="imu_link" />
  <joint name="imu_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <parent link="chassis_link" />
    <child link="imu_link" />
  </joint>
  -->
  <!-- IMU -->
  <!-- <link name="imu_link" />
  <joint name="imu_joint" type="fixed">
    <origin xyz="0 0 ${track_offset_z}" rpy="0 0 0" />
    <parent link="chassis_link"/>
    <child link="imu_link"/>
  </joint> -->

  <!-- Transmissions -->
  <transmission name="trans_flipper_front">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="flipper_joint_front">
      <!--<hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>-->
      <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="flipper_motor_front">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="trans_flipper_back">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="flipper_joint_back">
      <!--<hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>-->
      <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="flipper_motor_back">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>

  <!-- add ground truth plugin, see: -->
  <!-- https://classic.gazebosim.org/tutorials?tut=ros_gzplugins#P3D(3DPositionInterfaceforGroundTruth) -->
  <gazebo>
    <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
      <alwaysOn>true</alwaysOn>
      <!-- update rate of the topic should exceed that of all sensor measurements -->
      <updateRate>50.0</updateRate>
      <!-- the name of the link on which EKF/VIO/LIO estimates are made -->
      <bodyName>camera_mount</bodyName>
      <!-- name of the ROS topic to publish ground truth to -->
      <topicName>ground_truth/odom</topicName>
      <!-- name of the frame used to reference odometry towards -->
      <!-- or the name of the frame represented by it in gazebo! -->
      <frameName>world</frameName>
      <!-- ground truth should not contain any offsets or -->
      <xyzOffsets>0 0 0</xyzOffsets>
      <rpyOffsets>0 0 0</rpyOffsets>
      <gaussianNoise>0</gaussianNoise>

    </plugin>
  </gazebo>
</robot>